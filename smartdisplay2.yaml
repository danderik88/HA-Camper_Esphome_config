esphome:
  name: smartdisplay2
  friendly_name: SmartDisplay2

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "T17j00pykEcJrF4yLmX/dPaQdCTXohjPknvckEzee+M="

ota:
  - platform: esphome
    password: "d6488f9b91185451c6c33f29699d22c3"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Smartdisplay2 Fallback Hotspot"
    password: "43KFlKLmV5YQ"

web_server:
  port: 80

captive_portal:

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1 # Update every minute
        then:
          - component.update: my_display    

font: 

  # gfonts://family[@weight]
  - file: "gfonts://Roboto@500"
    id: big_text
    size: 60
    bpp: 4
    glyphs:
      ['&', '@', '!', ',', '.', '?', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', 'ì', 'Ì', 'å', 'Ä', 'ä', 'Ö', 'ö', 'Ü', 'ü', '/']

  # gfonts://family[@weight]
  - file: "gfonts://Roboto@300"
    id: notice_text
    size: 16
    bpp: 4
    glyphs:
      ['&', '@', '!', ',', '.', '?', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'Ä', 'ä', 'Ö', 'ö', 'Ü', 'ü', '/']     

  # gfonts://family[@weight]
  - file: "gfonts://Roboto@400"
    id: label
    size: 13
    bpp: 4
    glyphs:
      ['&', '@', '!', ',', '.', '?', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'Ä', 'ä', 'Ö', 'ö', 'Ü', 'ü', '/']            

  - file: 'fonts/materialdesignicons-webfont.ttf' # Get them from https://github.com/Templarian/MaterialDesign-Webfont/blob/master/fonts/materialdesignicons-webfont.ttf and copy to a folder /fonts
    id: materialdesign_icons
    size: 35
    glyphs: ["\U000F11E1","\U000F091D","\U000F1051"]

# If you want a background image for your screen you can uncomment the next lines. Keep in mind rendering images slows down refresh of the display
#image:
#  - file: "images/my_background_image.jpg"
#    id: background
#    type: RGB565
          
color:
  - id: ACTIVE
    hex: "FEC600"  
  - id: INACTIVE
    hex: "808080"  

sensor:
  - platform: wifi_signal
    name: "Wifi Signal"
    update_interval: 600s  
  - platform: uptime
    name: "Uptime"
    id: uptime_s
    update_interval: 15s       

binary_sensor:
# Adjust touchscreen touch areas if needed
# To trigger button actions use HA and just create an automation that uses the exposed buttons as triggers on change
  - platform: status
    name: "Node Status"
    id: system_status
  - platform: touchscreen
    name: Button 1  # exposes a button to HA
    x_min: 53
    x_max: 131    
    y_min: 18
    y_max: 63
  - platform: touchscreen
    name: Button 2  # exposes a button to HA
    x_min: 53
    x_max: 131  
    y_min: 72
    y_max: 115   
  - platform: touchscreen
    name: Button 3  # exposes a button to HA
    x_min: 53
    x_max: 131   
    y_min: 126
    y_max: 169
  - platform: touchscreen
    name: Button 4  # exposes a button to HA
    x_min: 53
    x_max: 131     
    y_min: 178
    y_max: 224    
      
text_sensor:
  - platform: template
    name: "Uptime (formatted)"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 60s    

    # Import HA entities
    # Adjust to your needs. I used the entities to change the background color of the button depending on the state
    # There is for sure a better solution but feel free to adjust. 
  - platform: homeassistant
    id: button1
    entity_id: switch.dinette_faretti_panca
    on_value:
      then:
        - component.update: my_display
  - platform: homeassistant
    id: button2
    entity_id: switch.dinette_faretti_tavolo
    on_value:
      then:
        - component.update: my_display
  - platform: homeassistant
    id: button3
    entity_id: switch.doccia_luce      
    on_value:
      then:
        - component.update: my_display
  - platform: homeassistant
    id: button4
    entity_id: switch.gavone_luce
    on_value:
      then:
        - component.update: my_display        

switch:
  - platform: restart
    name: "Restart"  

spi:
  - id: lcd
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12
  - id: my_touchscreen
    clk_pin: GPIO25
    mosi_pin: GPIO32
    miso_pin: GPIO39  

output:
  - platform: ledc
    pin: GPIO21
    id: gpio_backlight_pwm
  - platform: ledc
    id: output_red
    pin: GPIO4
    inverted: true
  - platform: ledc
    id: output_green
    pin: GPIO16
    inverted: true
  - platform: ledc
    id: output_blue
    pin: GPIO17
    inverted: true    

light:
  - platform: monochromatic
    output: gpio_backlight_pwm
    name: "Power Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON        
  - platform: rgb
    name: LED
    red: output_red
    id: led
    green: output_green
    blue: output_blue
    restore_mode: ALWAYS_OFF    

touchscreen:
  platform: xpt2046
  spi_id: my_touchscreen
  cs_pin: 33
  interrupt_pin: 36
  update_interval: 50ms
  threshold: 400
  on_touch:
    - lambda: |-
          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
              touch.x,
              touch.y,
              touch.x_raw,
              touch.y_raw
              );
  calibration:
    x_min: 280
    x_max: 3860
    y_min: 340
    y_max: 3860
  transform:
    mirror_x: true
    mirror_y: false     

display:
  - platform: ili9xxx
    id: my_display
    spi_id: lcd
    model: ILI9341
    cs_pin: 15
    dc_pin: 2
    #reset_pin: 16
    rotation: 90
    invert_colors: false
    update_interval: never   

    # # If you want to use a background image uncomment these lines.
    #color_palette: IMAGE_ADAPTIVE
    #color_palette_images:
    #  - "images/smartpanel/smartpanel_bg.jpg"   

    pages:      
      - id: lockscreen_page
        lambda: |-
          std::map<std::uint8_t, std::string> day_map
          {
            {2, "Lunedi"},
            {3, "Martedi"},
            {4, "Mercoledi"},
            {5, "Giovedi"},
            {6, "Venerdi"},
            {7, "Sabato"},
            {1, "Domenica"}
          };

          std::map<std::uint8_t, std::string> month_map
          {
            {1, "Gennaio"},
            {2, "Febbraio"},
            {3, "Marzo"},
            {4, "Aprile"},
            {5, "Maggio"},
            {6, "Giugno"},
            {7, "Luglio"},
            {8, "Agosto"},
            {9, "Settembre"},
            {10, "Ottobre"},
            {11, "Novembre"},
            {12, "Dicembre"}
          };

            //it.image(0, 0, id(background));

            
            auto white = Color(255, 255, 255);
            
            int b_pos_y = 170;

            // Button 1
            int b1_pos_x = (it.get_width()/2) - 105;
            if (id(button1).state == "off") {
              it.filled_circle(b1_pos_x, b_pos_y, 30, id(INACTIVE));
            } else {
              it.filled_circle(b1_pos_x, b_pos_y, 30, white);
            }
            it.printf(b1_pos_x, b_pos_y, id(materialdesign_icons),id(ACTIVE), TextAlign::CENTER, "\U000F11E1");             
            it.printf(b1_pos_x, b_pos_y + 45, id(label),id(Color::WHITE), TextAlign::CENTER, "Panca");   

            // Button 2
            int b2_pos_x = (it.get_width()/2) - 35;
            if (id(button2).state == "off") {
              it.filled_circle(b2_pos_x, b_pos_y, 30, id(INACTIVE));
            } else {
              it.filled_circle(b2_pos_x, b_pos_y, 30, white);
            }
            it.printf(b2_pos_x, b_pos_y, id(materialdesign_icons),id(ACTIVE), TextAlign::CENTER, "\U000F11E1");  
            it.printf(b2_pos_x, b_pos_y + 45, id(label),id(Color::WHITE), TextAlign::CENTER, "Tavolo");   

            // Button 3
            int b3_pos_x = (it.get_width()/2) + 35;
            if (id(button3).state == "off") {
              it.filled_circle(b3_pos_x, b_pos_y, 30, id(INACTIVE));
            } else {
              it.filled_circle(b3_pos_x, b_pos_y, 30, white);
            }
            it.printf(b3_pos_x, b_pos_y, id(materialdesign_icons),id(ACTIVE), TextAlign::CENTER, "\U000F091D");  
            it.printf(b3_pos_x, b_pos_y + 45, id(label),id(Color::WHITE), TextAlign::CENTER, "Doccia");  

            // Button 4
            int b4_pos_x = (it.get_width()/2) + 105;
            if (id(button4).state == "off") {
              it.filled_circle(b4_pos_x, b_pos_y, 30, id(INACTIVE));
            } else {
              it.filled_circle(b4_pos_x, b_pos_y, 30, white);
            }
            it.printf(b4_pos_x, b_pos_y, id(materialdesign_icons),id(ACTIVE), TextAlign::CENTER, "\U000F1051");  
            it.printf(b4_pos_x, b_pos_y + 45, id(label),id(Color::WHITE), TextAlign::CENTER, "Gavone");                                      


            // Date Time
            std::string day_of_week = day_map[id(homeassistant_time).now().day_of_week];    
            int day_of_month = id(homeassistant_time).now().day_of_month;    
            std::string month = month_map[id(homeassistant_time).now().month];    
            it.printf(it.get_width()/2, it.get_height()/2 - 90, id(notice_text),id(Color::WHITE), TextAlign::CENTER, "%s, %d. %s", day_of_week.c_str(),day_of_month,month.c_str());  
            it.strftime(it.get_width()/2, it.get_height()/2 - 45, id(big_text),id(Color::WHITE), TextAlign::CENTER, "%H:%M", id(homeassistant_time).now());  
